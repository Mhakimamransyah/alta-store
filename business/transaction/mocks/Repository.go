// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transaction "altaStore/business/transaction"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: _a0
func (_m *Repository) CreateTransaction(_a0 transaction.Transaction) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllTransaction provides a mock function with given fields: listCartID
func (_m *Repository) FindAllTransaction(listCartID []uint) ([]transaction.Transaction, error) {
	ret := _m.Called(listCartID)

	var r0 []transaction.Transaction
	if rf, ok := ret.Get(0).(func([]uint) []transaction.Transaction); ok {
		r0 = rf(listCartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(listCartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionByInvoice provides a mock function with given fields: invoiceNumber
func (_m *Repository) FindTransactionByInvoice(invoiceNumber string) (*transaction.Transaction, error) {
	ret := _m.Called(invoiceNumber)

	var r0 *transaction.Transaction
	if rf, ok := ret.Get(0).(func(string) *transaction.Transaction); ok {
		r0 = rf(invoiceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionStatus provides a mock function with given fields: invoiceNumber, status
func (_m *Repository) UpdateTransactionStatus(invoiceNumber string, status string) error {
	ret := _m.Called(invoiceNumber, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(invoiceNumber, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
