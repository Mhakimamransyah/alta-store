// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transaction "altaStore/business/transaction"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: _a0
func (_m *Service) Checkout(_a0 transaction.CheckoutSpec) (*transaction.CheckoutResponse, error) {
	ret := _m.Called(_a0)

	var r0 *transaction.CheckoutResponse
	if rf, ok := ret.Get(0).(func(transaction.CheckoutSpec) *transaction.CheckoutResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.CheckoutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaction.CheckoutSpec) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionByInvoice provides a mock function with given fields: invoiceNumber, UserID
func (_m *Service) FindTransactionByInvoice(invoiceNumber string, UserID uint) (*transaction.CheckoutResponse, error) {
	ret := _m.Called(invoiceNumber, UserID)

	var r0 *transaction.CheckoutResponse
	if rf, ok := ret.Get(0).(func(string, uint) *transaction.CheckoutResponse); ok {
		r0 = rf(invoiceNumber, UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.CheckoutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(invoiceNumber, UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTransaction provides a mock function with given fields: userID
func (_m *Service) GetAllTransaction(userID uint) ([]*transaction.CheckoutResponse, error) {
	ret := _m.Called(userID)

	var r0 []*transaction.CheckoutResponse
	if rf, ok := ret.Get(0).(func(uint) []*transaction.CheckoutResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.CheckoutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
