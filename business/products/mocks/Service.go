// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	products "altaStore/business/products"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DetailProducts provides a mock function with given fields: id_products
func (_m *Service) DetailProducts(id_products int) (*products.Products, error) {
	ret := _m.Called(id_products)

	var r0 *products.Products
	if rf, ok := ret.Get(0).(func(int) *products.Products); ok {
		r0 = rf(id_products)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id_products)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllProducts provides a mock function with given fields: filter
func (_m *Service) FindAllProducts(filter products.FilterProducts) (*[]products.Products, error) {
	ret := _m.Called(filter)

	var r0 *[]products.Products
	if rf, ok := ret.Get(0).(func(products.FilterProducts) *[]products.Products); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]products.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(products.FilterProducts) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProducts provides a mock function with given fields: id_admin, products_spec, createdById
func (_m *Service) InsertProducts(id_admin int, products_spec products.ProductsSpec, createdById int) (*products.Products, error) {
	ret := _m.Called(id_admin, products_spec, createdById)

	var r0 *products.Products
	if rf, ok := ret.Get(0).(func(int, products.ProductsSpec, int) *products.Products); ok {
		r0 = rf(id_admin, products_spec, createdById)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, products.ProductsSpec, int) error); ok {
		r1 = rf(id_admin, products_spec, createdById)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyProducts provides a mock function with given fields: id_admin, id_products, products_updatable, modifiedById
func (_m *Service) ModifyProducts(id_admin int, id_products int, products_updatable products.ProductsUpdatable, modifiedById int) error {
	ret := _m.Called(id_admin, id_products, products_updatable, modifiedById)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, products.ProductsUpdatable, int) error); ok {
		r0 = rf(id_admin, id_products, products_updatable, modifiedById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProducts provides a mock function with given fields: id_products, deletedById
func (_m *Service) RemoveProducts(id_products int, deletedById int) error {
	ret := _m.Called(id_products, deletedById)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id_products, deletedById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
