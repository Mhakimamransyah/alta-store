// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	categories "altaStore/business/categories"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// FindAllCategories provides a mock function with given fields: categories_search
func (_m *Service) FindAllCategories(categories_search *categories.FilterCategories) (*[]categories.Categories, error) {
	ret := _m.Called(categories_search)

	var r0 *[]categories.Categories
	if rf, ok := ret.Get(0).(func(*categories.FilterCategories) *[]categories.Categories); ok {
		r0 = rf(categories_search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]categories.Categories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*categories.FilterCategories) error); ok {
		r1 = rf(categories_search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllSubCategories provides a mock function with given fields: id_categories, categories_search
func (_m *Service) FindAllSubCategories(id_categories int, categories_search *categories.FilterCategories) (*[]categories.Categories, error) {
	ret := _m.Called(id_categories, categories_search)

	var r0 *[]categories.Categories
	if rf, ok := ret.Get(0).(func(int, *categories.FilterCategories) *[]categories.Categories); ok {
		r0 = rf(id_categories, categories_search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]categories.Categories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *categories.FilterCategories) error); ok {
		r1 = rf(id_categories, categories_search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCategories provides a mock function with given fields: categories_spec, id_admin, createdById
func (_m *Service) InsertCategories(categories_spec categories.CategoriesSpec, id_admin int, createdById int) error {
	ret := _m.Called(categories_spec, id_admin, createdById)

	var r0 error
	if rf, ok := ret.Get(0).(func(categories.CategoriesSpec, int, int) error); ok {
		r0 = rf(categories_spec, id_admin, createdById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyCategories provides a mock function with given fields: categories_updatable, id_categories, id_admin, modifiedById
func (_m *Service) ModifyCategories(categories_updatable categories.CategoriesUpdatable, id_categories int, id_admin int, modifiedById int) error {
	ret := _m.Called(categories_updatable, id_categories, id_admin, modifiedById)

	var r0 error
	if rf, ok := ret.Get(0).(func(categories.CategoriesUpdatable, int, int, int) error); ok {
		r0 = rf(categories_updatable, id_categories, id_admin, modifiedById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCategories provides a mock function with given fields: id_categories, id_admin, deletedById
func (_m *Service) RemoveCategories(id_categories int, id_admin int, deletedById int) error {
	ret := _m.Called(id_categories, id_admin, deletedById)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(id_categories, id_admin, deletedById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
