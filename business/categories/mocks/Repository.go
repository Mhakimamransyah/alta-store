// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	categories "altaStore/business/categories"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateCategories provides a mock function with given fields: _a0, createdById
func (_m *Repository) CreateCategories(_a0 *categories.Categories, createdById int) error {
	ret := _m.Called(_a0, createdById)

	var r0 error
	if rf, ok := ret.Get(0).(func(*categories.Categories, int) error); ok {
		r0 = rf(_a0, createdById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategories provides a mock function with given fields: id_categories, deletedById
func (_m *Repository) DeleteCategories(id_categories int, deletedById int) error {
	ret := _m.Called(id_categories, deletedById)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id_categories, deletedById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCategories provides a mock function with given fields: categories_search
func (_m *Repository) GetCategories(categories_search *categories.FilterCategories) (*[]categories.Categories, error) {
	ret := _m.Called(categories_search)

	var r0 *[]categories.Categories
	if rf, ok := ret.Get(0).(func(*categories.FilterCategories) *[]categories.Categories); ok {
		r0 = rf(categories_search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]categories.Categories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*categories.FilterCategories) error); ok {
		r1 = rf(categories_search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesById provides a mock function with given fields: id_categories
func (_m *Repository) GetCategoriesById(id_categories int) (*categories.Categories, error) {
	ret := _m.Called(id_categories)

	var r0 *categories.Categories
	if rf, ok := ret.Get(0).(func(int) *categories.Categories); ok {
		r0 = rf(id_categories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*categories.Categories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id_categories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubCategories provides a mock function with given fields: id_categories, categories_search
func (_m *Repository) GetSubCategories(id_categories int, categories_search *categories.FilterCategories) (*[]categories.Categories, error) {
	ret := _m.Called(id_categories, categories_search)

	var r0 *[]categories.Categories
	if rf, ok := ret.Get(0).(func(int, *categories.FilterCategories) *[]categories.Categories); ok {
		r0 = rf(id_categories, categories_search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]categories.Categories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *categories.FilterCategories) error); ok {
		r1 = rf(id_categories, categories_search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategories provides a mock function with given fields: _a0, modifiedById
func (_m *Repository) UpdateCategories(_a0 *categories.Categories, modifiedById int) error {
	ret := _m.Called(_a0, modifiedById)

	var r0 error
	if rf, ok := ret.Get(0).(func(*categories.Categories, int) error); ok {
		r0 = rf(_a0, modifiedById)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
