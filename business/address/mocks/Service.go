// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	address "altaStore/business/address"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAllAddress provides a mock function with given fields: userID
func (_m *Service) GetAllAddress(userID uint) ([]address.Address, error) {
	ret := _m.Called(userID)

	var r0 []address.Address
	if rf, ok := ret.Get(0).(func(uint) []address.Address); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultAddress provides a mock function with given fields: userID
func (_m *Service) GetDefaultAddress(userID uint) (*address.Address, error) {
	ret := _m.Called(userID)

	var r0 *address.Address
	if rf, ok := ret.Get(0).(func(uint) *address.Address); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAddress provides a mock function with given fields: insertAddressSpec
func (_m *Service) InsertAddress(insertAddressSpec address.InsertAddressSpec) error {
	ret := _m.Called(insertAddressSpec)

	var r0 error
	if rf, ok := ret.Get(0).(func(address.InsertAddressSpec) error); ok {
		r0 = rf(insertAddressSpec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
