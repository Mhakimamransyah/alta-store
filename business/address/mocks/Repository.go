// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	address "altaStore/business/address"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAddressByID provides a mock function with given fields: addressID
func (_m *Repository) GetAddressByID(addressID uint) (*address.TransactionAddress, error) {
	ret := _m.Called(addressID)

	var r0 *address.TransactionAddress
	if rf, ok := ret.Get(0).(func(uint) *address.TransactionAddress); ok {
		r0 = rf(addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.TransactionAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressForTransaction provides a mock function with given fields: userID, addressID
func (_m *Repository) GetAddressForTransaction(userID uint, addressID uint) (*address.TransactionAddress, error) {
	ret := _m.Called(userID, addressID)

	var r0 *address.TransactionAddress
	if rf, ok := ret.Get(0).(func(uint, uint) *address.TransactionAddress); ok {
		r0 = rf(userID, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.TransactionAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAddress provides a mock function with given fields: userID
func (_m *Repository) GetAllAddress(userID uint) ([]address.Address, error) {
	ret := _m.Called(userID)

	var r0 []address.Address
	if rf, ok := ret.Get(0).(func(uint) []address.Address); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultAddress provides a mock function with given fields: userID
func (_m *Repository) GetDefaultAddress(userID uint) (*address.Address, error) {
	ret := _m.Called(userID)

	var r0 *address.Address
	if rf, ok := ret.Get(0).(func(uint) *address.Address); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAddress provides a mock function with given fields: _a0
func (_m *Repository) InsertAddress(_a0 address.Address) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(address.Address) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDefaultAddress provides a mock function with given fields: _a0
func (_m *Repository) UpdateDefaultAddress(_a0 address.Address) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(address.Address) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
